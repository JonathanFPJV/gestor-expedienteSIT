// preload.js - El Puente Seguro
const { contextBridge, ipcRenderer } = require('electron');

console.log('Preload script cargado correctamente');

contextBridge.exposeInMainWorld('api', {
  enviar: (canal, datos) => {
    console.log(`üì§ Enviando al canal: ${canal}`, datos);
    return ipcRenderer.send(canal, datos);
  },
  recibir: (canal, callback) => {
    console.log(`üëÇ Escuchando canal: ${canal}`);
    ipcRenderer.on(canal, (event, ...args) => {
      console.log(`üì® Datos recibidos del canal ${canal}:`, args);
      callback(...args);
    });
  },
  // **Funci√≥n para invoke con respuesta**
  invoke: async (canal, ...datos) => {
    console.log(`üîÑ Invocando canal: ${canal}`, datos);
    try {
      const result = await ipcRenderer.invoke(canal, ...datos);
      console.log(`‚úÖ Respuesta recibida del canal ${canal}:`, result);
      return result;
    } catch (error) {
      console.error(`‚ùå Error en invoke del canal ${canal}:`, error);
      throw error;
    }
  },
  // **Funci√≥n para abrir di√°logo de PDF**
  abrirDialogoPdf: async () => {
    console.log('üìÅ Solicitando di√°logo de PDF...');
    try {
      const result = await ipcRenderer.invoke('abrir-dialogo-pdf');
      console.log('üìÑ Resultado del di√°logo:', result);
      return result;
    } catch (error) {
      console.error('‚ùå Error en abrirDialogoPdf:', error);
      return null;
    }
  },
  
  // M√©todo para escuchar eventos del proceso principal
  on: (canal, callback) => {
    console.log(`üéØ Registrando listener para canal: ${canal}`);
    ipcRenderer.on(canal, (event, ...args) => {
      console.log(`üîî Evento recibido del canal ${canal}:`, args);
      callback(...args);
    });
  },
  
  // M√©todo para remover listeners
  removeListener: (canal, callback) => {
    ipcRenderer.removeListener(canal, callback);
  }
});

console.log('API expuesta en window.api con m√©todos extendidos');